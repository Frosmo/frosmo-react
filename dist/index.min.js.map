{"version":3,"file":"index.min.js","sources":["../src/components/frosmo-placement/FrosmoPlacement.js"],"sourcesContent":["/* global frosmo */\n/* eslint-disable no-nested-ternary */\nimport React from 'react';\nimport assign from 'object-assign';\nimport PropTypes from 'prop-types';\n\nconst STATUS_LOADING = 'loading';\nconst STATUS_SUCCESS = 'success';\nconst STATUS_ERROR = 'error';\nconst STATUS_NOTFOUND = 'notfound';\nconst DOM_EVENT_FROSMO_SPA_READY = 'frosmo.spa.ready'\n\nconst ChildComponentPropTypes = {\n    children: PropTypes.node,\n    component: PropTypes.node,\n    status: PropTypes.oneOf([\n      STATUS_LOADING,\n      STATUS_SUCCESS,\n      STATUS_NOTFOUND,\n      STATUS_ERROR,\n    ]),\n    loadComponent: PropTypes.node,\n    errorComponent: PropTypes.node,\n    message: PropTypes.shape({\n      template: PropTypes.shape({\n        defaults: PropTypes.any,\n      }),\n    }),\n    positionData: PropTypes.shape({\n      message: PropTypes.object,\n      rules: PropTypes.array,\n    }),\n  };\n\nconst ChildComponentDefaultProps = {\n    children: null,\n    component: null,\n    status: '',\n    loadComponent: null,\n    errorComponent: null,\n    message: undefined,\n    positionData: undefined,\n};\n\n\n/**\n * Custom React component provided by Frosmo (Joona Ojapalo)\n */\nclass ChildComponent extends React.Component {\n    render () {\n        const {\n            children,\n            status,\n            component,\n            loadComponent,\n            errorComponent,\n            message,\n            positionData,\n        } = this.props;\n\n        const buildLoadElement = loadComponent =>\n            loadComponent\n                ? React.createElement(loadComponent)\n                : null;\n\n        switch (status) {\n            case STATUS_NOTFOUND:\n            case STATUS_LOADING:\n                return buildLoadElement(loadComponent);\n\n            case STATUS_SUCCESS:\n                const templateDefaults = message.template\n                    ? JSON.parse(message.template.defaults)\n                    : {};\n\n                // build props for modification component\n                const messageProps = {\n                    ...templateDefaults,\n                    frosmoMessage: message,\n                    frosmoPositionData: positionData,\n                };\n\n                // set templateDefaults as props\n                const hasChildren = children && React.Children.count(children) > 0;\n\n                const outputComponent = component\n                     ? React.createElement(component, messageProps)\n                     : hasChildren\n                        ? React.Children.map(children, child => {\n                            const props = assign({}, child.props, messageProps);\n                            return React.createElement(child.type, props);\n                        })\n                        : null;\n\n                // display tracking\n                if (outputComponent) {\n                    const mi = positionData.getMessageInstance();\n                    mi.setDisplayed();\n                }\n\n                // show loadComponent as fallback\n                if (!outputComponent) {\n                    return buildLoadElement(loadComponent);\n                }\n\n                return outputComponent;\n\n            case STATUS_ERROR:\n                return errorComponent\n                    ? React.createElement(errorComponent)\n                    : null;\n\n            default:\n                console.error('[FrosmoPlacement] :: invalid status', status);\n                return null;\n        }\n    }\n}\n\nChildComponent.propTypes = ChildComponentPropTypes;\nChildComponent.defaultProps = ChildComponentDefaultProps;\n\nexport default class FrosmoPlacement extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            status: STATUS_LOADING,\n            message: null,\n            positionData: null,\n        };\n\n        if (!props.id) {\n            throw new Error('FrosmoPlacement: \"id\" property missing.', props);\n        }\n    }\n\n    onFrosmoSpaReady() {\n        window.removeEventListener(DOM_EVENT_FROSMO_SPA_READY, this.onFrosmoSpaReady);\n\n        const id = this.props.id;\n\n        frosmo.spa.requestBySelector(id)\n            .then(messageHandle => {\n                // no display from server-side\n                if (!messageHandle.positionData.message) {\n                    this.setState({\n                        status: STATUS_NOTFOUND\n                    });\n                }\n\n                this.setState({\n                    status: STATUS_SUCCESS,\n                    message: messageHandle.positionData.message,\n                    positionData: messageHandle.positionData,\n                    clearMessage: messageHandle.clear,\n                });\n            })\n            .catch(error => {\n                this.setState({\n                    status: STATUS_ERROR\n                });\n                frosmo.spa.log.error(error, 'spa.react.placement');\n            })\n    }\n\n    componentWillUnmount() {\n        // clear message if was loaded\n        if (!this.state.positionData) {\n            return;\n        }\n\n        // cleanup\n        this.state.clearMessage();\n    }\n\n    componentDidMount() {\n        if (window.frosmo && window.frosmo.spa) {\n            this.onFrosmoSpaReady();\n        } else {\n            window.addEventListener(DOM_EVENT_FROSMO_SPA_READY, this.onFrosmoSpaReady.bind(this));\n        }\n    }\n\n    componentDidUpdate() {\n        if (this.state.status === STATUS_SUCCESS) {\n            const el = this.refs.frosmomessage;\n            const instance = this.state.positionData.getMessageInstance();\n\n            // TODO: proper error handling model...\n            if (!el || !instance) {\n                return;\n            }\n\n            // start tracking the message\n            instance.setTrackableElements(el);\n            instance.startTracking();\n        }\n    }\n\n    render() {\n        // pass state as immutable props\n        const stateClone = assign({}, this.state);\n        const element = <ChildComponent {...this.props} {...stateClone}/>;\n\n        // wrap in fragment\n        if (this.props.useFragment) {\n            return <React.Fragment>{element}</React.Fragment>;\n        }\n\n        // wrap inside a trackable div element\n        return (\n            <div data-frosmo-elementid={this.props.id} ref=\"frosmomessage\">{element}</div>\n        );\n    }\n}\n"],"names":["STATUS_LOADING","STATUS_SUCCESS","STATUS_ERROR","STATUS_NOTFOUND","DOM_EVENT_FROSMO_SPA_READY","ChildComponentPropTypes","children","PropTypes","node","component","status","oneOf","loadComponent","errorComponent","message","shape","template","defaults","any","positionData","object","rules","array","ChildComponentDefaultProps","undefined","ChildComponent","React","Component","this","props","buildLoadElement","createElement","messageProps","JSON","parse","frosmoMessage","frosmoPositionData","hasChildren","Children","count","outputComponent","map","child","assign","type","getMessageInstance","setDisplayed","console","error","propTypes","defaultProps","FrosmoPlacement","state","id","Error","window","removeEventListener","onFrosmoSpaReady","frosmo","spa","requestBySelector","then","messageHandle","_this2","setState","clearMessage","clear","catch","log","addEventListener","bind","el","refs","frosmomessage","instance","setTrackableElements","startTracking","stateClone","element","useFragment","Fragment","ref"],"mappings":"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"}