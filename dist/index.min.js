'use strict';var React=require('react'),assign=require('object-assign'),PropTypes=require('prop-types');function _assertThisInitialized(e) {
  if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function _callSuper(t, o, e) {
  return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e));
}
function _classCallCheck(a, n) {
  if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function");
}
function _defineProperties(e, r) {
  for (var t = 0; t < r.length; t++) {
    var o = r[t];
    o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o);
  }
}
function _createClass(e, r, t) {
  return r && _defineProperties(e.prototype, r), Object.defineProperty(e, "prototype", {
    writable: !1
  }), e;
}
function _defineProperty(e, r, t) {
  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {
    value: t,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : e[r] = t, e;
}
function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function (n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    }
    return n;
  }, _extends.apply(null, arguments);
}
function _getPrototypeOf(t) {
  return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) {
    return t.__proto__ || Object.getPrototypeOf(t);
  }, _getPrototypeOf(t);
}
function _inherits(t, e) {
  if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
  t.prototype = Object.create(e && e.prototype, {
    constructor: {
      value: t,
      writable: !0,
      configurable: !0
    }
  }), Object.defineProperty(t, "prototype", {
    writable: !1
  }), e && _setPrototypeOf(t, e);
}
function _isNativeReflectConstruct() {
  try {
    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
  } catch (t) {}
  return (_isNativeReflectConstruct = function () {
    return !!t;
  })();
}
function ownKeys(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function (r) {
      return Object.getOwnPropertyDescriptor(e, r).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread2(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {
      _defineProperty(e, r, t[r]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {
      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));
    });
  }
  return e;
}
function _possibleConstructorReturn(t, e) {
  if (e && ("object" == typeof e || "function" == typeof e)) return e;
  if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
  return _assertThisInitialized(t);
}
function _setPrototypeOf(t, e) {
  return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) {
    return t.__proto__ = e, t;
  }, _setPrototypeOf(t, e);
}
function _toPrimitive(t, r) {
  if ("object" != typeof t || !t) return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r);
    if ("object" != typeof i) return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (String )(t);
}
function _toPropertyKey(t) {
  var i = _toPrimitive(t, "string");
  return "symbol" == typeof i ? i : i + "";
}var ERR_SPA_UNAVALIABLE = 'frosmo.spa is not available, fallback to console.error';
function error(message) {
  if (!window || !window.frosmo || !window.frosmo.spa) {
    console.warn(ERR_SPA_UNAVALIABLE);
    console.error(message);
  }
  window.frosmo.spa.log.error(message, 'spa.react.placement');
}
var logger = {
  error: error
};var DOM_EVENT_FROSMO_SPA_READY = 'frosmo.spa.ready';
var ModificationService = /*#__PURE__*/function () {
  function ModificationService(_ref) {
    var id = _ref.id,
      onComplete = _ref.onComplete;
    _classCallCheck(this, ModificationService);
    var noop = function noop() {};
    this._id = id;
    this._func = onComplete || noop;
    this._modificationContextHandle = null;
    this._fetchModifications = this._fetchModifications.bind(this);
  }
  return _createClass(ModificationService, [{
    key: "fetch",
    value: function fetch() {
      if (!window) {
        return;
      }
      if (window.frosmo && window.frosmo.spa) {
        this._fetchModifications();
      } else if (window.addEventListener) {
        window.addEventListener(DOM_EVENT_FROSMO_SPA_READY, this._fetchModifications);
      } else if (window.attachEvent) {
        window.attachEvent(DOM_EVENT_FROSMO_SPA_READY, this._fetchModifications);
      } else {
        logger.error('Event cannot be attached');
      }
    }
  }, {
    key: "_fetchModifications",
    value: function _fetchModifications() {
      var _this = this;
      this._modificationContextHandle = window.frosmo.spa.requestBySelector(this._id);
      this._modificationContextHandle.then(function (context) {
        return _this._func(context);
      })["catch"](function (error) {
        logger.error(error);
        _this._func(null);
      });
    }
  }, {
    key: "cancel",
    value: function cancel() {
      if (this._modificationContextHandle) {
        this._modificationContextHandle.cancel();
        this._modificationContextHandle = null;
      }
      if (window.removeEventListener) {
        window.removeEventListener(DOM_EVENT_FROSMO_SPA_READY, this._fetchModifications);
      } else if (window.detachEvent) {
        window.detachEvent(DOM_EVENT_FROSMO_SPA_READY, this._fetchModifications);
      } else {
        logger.error('Event cannot be detached');
      }
      this._func = null;
    }
  }]);
}();function withModification(WrappedComponent) {
  return /*#__PURE__*/function (_Component) {
    function _class(props) {
      var _this;
      _classCallCheck(this, _class);
      _this = _callSuper(this, _class, [props]);
      if (!props.id) {
        console && console.warn && console.warn('FrosmoPlacement: "id" property missing.', props);
      }
      _this.state = {
        isReady: false,
        modificationContext: null
      };
      _this._modificationContextService = new ModificationService({
        id: props.id,
        onComplete: function onComplete(modificationContext) {
          _this.setState({
            modificationContext: modificationContext,
            isReady: true
          });
        }
      });
      return _this;
    }
    _inherits(_class, _Component);
    return _createClass(_class, [{
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this._modificationContextService.cancel();
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        this._modificationContextService.fetch();
      }
    }, {
      key: "render",
      value: function render() {
        if (!this.state.isReady) {
          return this.props.defaultComponent ? React.createElement(this.props.defaultComponent, this.props) : null;
        }
        return /*#__PURE__*/React.createElement(WrappedComponent, _extends({
          modificationContext: this.state.modificationContext
        }, this.props));
      }
    }]);
  }(React.Component);
}var _createReactElement = function _createReactElement(component) {
  return component ? React.createElement(component) : null;
};
var hasChildren = function hasChildren(children) {
  return children && React.Children.count(children) > 0;
};
var buildMessageProps = function buildMessageProps(modificationContext) {
  // Set templateDefaults as props
  var params = modificationContext.params;

  // Build props for modification component
  return _objectSpread2(_objectSpread2({}, params), {}, {
    frosmoModificationContext: modificationContext
  });
};
var createReactComponent = function createReactComponent(component, children, messageProps) {
  if (component) {
    return React.createElement(component, messageProps);
  } else if (hasChildren(children)) {
    return React.Children.map(children, function (child) {
      var childProps = assign({}, child.props, messageProps);
      return React.createElement(child.type, childProps);
    });
  } else {
    return null;
  }
};

/**
 * Custom React component provided by Frosmo (Joona Ojapalo)
 */
var _renderSuccess = function _renderSuccess(props) {
  var children = props.children,
    component = props.component,
    defaultComponent = props.defaultComponent,
    modificationContext = props.modificationContext;
  var messageProps = buildMessageProps(modificationContext);
  var outputComponent = createReactComponent(component, children, messageProps);

  // Display tracking
  if (!outputComponent) {
    // Show defaultComponent
    return _createReactElement(defaultComponent);
  } else {
    modificationContext.setDisplayed();
    return outputComponent;
  }
};
function ChildComponent (props) {
  var defaultComponent = props.defaultComponent,
    modificationContext = props.modificationContext;
  if (modificationContext !== null) {
    return _renderSuccess(props);
  }
  return _createReactElement(defaultComponent);
}var ModificationContextPropTypes = {
  variation: PropTypes.number.isRequired,
  params: PropTypes.object.isRequired,
  content: PropTypes.string.isRequired,
  setDisplayed: PropTypes.func.isRequired,
  setClicked: PropTypes.func.isRequired,
  setTrueDisplayed: PropTypes.func.isRequired,
  setTrackableElements: PropTypes.func.isRequired,
  startTracking: PropTypes.func.isRequired,
  error: PropTypes.func.isRequired,
  clear: PropTypes.func.isRequired
};
var FrosmoPropTypes = {
  children: PropTypes.node,
  modificationContext: PropTypes.exact(ModificationContextPropTypes)
};var FrosmoComponentDefaultProps = {
  children: null,
  component: null,
  defaultComponent: null,
  modificationContext: null
};
var FrosmoPlacement$1 = /*#__PURE__*/function (_Component) {
  function FrosmoPlacement(props) {
    _classCallCheck(this, FrosmoPlacement);
    return _callSuper(this, FrosmoPlacement, [props]);
  }
  _inherits(FrosmoPlacement, _Component);
  return _createClass(FrosmoPlacement, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var modificationContext = this.props.modificationContext;
      if (modificationContext !== null) {
        // start tracking the message
        modificationContext.setTrackableElements(this.frosmoMessage);
        modificationContext.startTracking();
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this = this;
      // Pass state as immutable props
      var element = /*#__PURE__*/React.createElement(ChildComponent, this.props);

      // Wrap in fragment
      if (this.props.useFragment) {
        return /*#__PURE__*/React.createElement(React.Fragment, null, element);
      }

      // Wrap inside a trackable div element
      return /*#__PURE__*/React.createElement("div", {
        "data-frosmo-elementid": this.props.id,
        ref: function ref(_ref) {
          _this.frosmoMessage = _ref;
        }
      }, element);
    }
  }]);
}(React.Component);
FrosmoPlacement$1.propTypes = FrosmoPropTypes;
FrosmoPlacement$1.defaultProps = FrosmoComponentDefaultProps;var FrosmoPlacement = withModification(FrosmoPlacement$1);exports.FrosmoPlacement=FrosmoPlacement;//# sourceMappingURL=data:application/json;charset=utf-8;base64,
