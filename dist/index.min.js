"use strict";function _interopDefault(e){return e&&"object"==typeof e&&"default"in e?e.default:e}Object.defineProperty(exports,"__esModule",{value:!0});var React=_interopDefault(require("react")),assign=_interopDefault(require("object-assign")),PropTypes=_interopDefault(require("prop-types"));function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var o=0;o<t.length;o++){var n=t[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function _createClass(e,t,o){return t&&_defineProperties(e.prototype,t),o&&_defineProperties(e,o),e}function _defineProperty(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function _extends(){return(_extends=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var o=arguments[t];for(var n in o)Object.prototype.hasOwnProperty.call(o,n)&&(e[n]=o[n])}return e}).apply(this,arguments)}function _objectSpread(t){for(var e=1;e<arguments.length;e++){var o=null!=arguments[e]?arguments[e]:{},n=Object.keys(o);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(o).filter(function(e){return Object.getOwnPropertyDescriptor(o,e).enumerable}))),n.forEach(function(e){_defineProperty(t,e,o[e])})}return t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _possibleConstructorReturn(e,t){return!t||"object"!=typeof t&&"function"!=typeof t?_assertThisInitialized(e):t}var pick=function(o,e){return e.reduce(function(e,t){return o[t]&&(e[t]=o[t]),e},{})},pickState=["status","component","loadComponent","errorComponent","message","positionData"],STATUS_LOADING="loading",STATUS_SUCCESS="success",STATUS_ERROR="error",STATUS_NOTFOUND="notfound",DOM_EVENT_FROSMO_SPA_READY="frosmo.spa.ready",ChildComponentPropTypes={children:PropTypes.node,component:PropTypes.node,status:PropTypes.oneOf([STATUS_LOADING,STATUS_SUCCESS,STATUS_NOTFOUND,STATUS_ERROR]),loadComponent:PropTypes.node,errorComponent:PropTypes.node,message:PropTypes.shape({template:PropTypes.shape({defaults:PropTypes.any})}),positionData:PropTypes.shape({message:PropTypes.object,rules:PropTypes.array})},ChildComponentDefaultProps={children:null,component:null,status:"",loadComponent:null,errorComponent:null,message:void 0,positionData:void 0},ChildComponent=function(e){function t(){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).apply(this,arguments))}return _inherits(t,React.Component),_createClass(t,[{key:"render",value:function(){var e=this.props,t=e.children,o=e.status,n=e.component,r=e.loadComponent,s=e.errorComponent,a=e.message,i=e.positionData,p=function(e){return e?React.createElement(e):null};switch(o){case STATUS_NOTFOUND:case STATUS_LOADING:return p(r);case STATUS_SUCCESS:var c=_objectSpread({},a.template?JSON.parse(a.template.defaults):{},{frosmoMessage:a,frosmoPositionData:i}),l=t&&0<React.Children.count(t),u=n?React.createElement(n,c):l?React.Children.map(t,function(e){var t=assign({},e.props,c);return React.createElement(e.type,t)}):null;if(u)i.getMessageInstance().setDisplayed();return u||p(r);case STATUS_ERROR:return s?React.createElement(s):null;default:return console.error("[FrosmoPlacement] :: invalid status",o),null}}}]),t}();ChildComponent.propTypes=ChildComponentPropTypes,ChildComponent.defaultProps=ChildComponentDefaultProps;var FrosmoPlacement=function(e){function o(e){var t;if(_classCallCheck(this,o),(t=_possibleConstructorReturn(this,_getPrototypeOf(o).call(this,e))).onFrosmoSpaReady.bind(_assertThisInitialized(t)),t.state={status:STATUS_LOADING,message:null,positionData:null,fetchPromise:null},!e.id)throw new Error('FrosmoPlacement: "id" property missing.',e);return t}return _inherits(o,React.Component),_createClass(o,[{key:"onFrosmoSpaReady",value:function(){var t=this;window.removeEventListener(DOM_EVENT_FROSMO_SPA_READY,this.onFrosmoSpaReady);var e=this.props.id,o=frosmo.spa.requestBySelector(e).then(function(e){e.positionData.message||t.setState({fetchPromise:null,status:STATUS_NOTFOUND}),t.setState({fetchPromise:null,status:STATUS_SUCCESS,message:e.positionData.message,positionData:e.positionData,clearMessage:e.clear})}).catch(function(e){t.setState({status:STATUS_ERROR}),frosmo.spa.log.error(e,"spa.react.placement")});this.setState({fetchPromise:o})}},{key:"componentWillUnmount",value:function(){window.removeEventListener(DOM_EVENT_FROSMO_SPA_READY,this.onFrosmoSpaReady),this.state.fetchPromise&&this.state.fetchPromise.cancel(),this.state.clearMessage&&this.state.clearMessage()}},{key:"componentDidMount",value:function(){window.frosmo&&window.frosmo.spa?this.onFrosmoSpaReady():window.addEventListener(DOM_EVENT_FROSMO_SPA_READY,this.onFrosmoSpaReady)}},{key:"componentDidUpdate",value:function(){if(this.state.status===STATUS_SUCCESS){var e=this.refs.frosmomessage,t=this.state.positionData.getMessageInstance();if(!e||!t)return;t.setTrackableElements(e),t.startTracking()}}},{key:"render",value:function(){var e=pick(this.state,pickState),t=React.createElement(ChildComponent,_extends({},this.props,e));return this.props.useFragment?React.createElement(React.Fragment,null,t):React.createElement("div",{"data-frosmo-elementid":this.props.id,ref:"frosmomessage"},t)}}]),o}();exports.FrosmoPlacement=FrosmoPlacement;//# sourceMappingURL=data:application/json;charset=utf-8;base64,
